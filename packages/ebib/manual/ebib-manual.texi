\input texinfo  @c -*-texinfo-*-

@setfilename ebib-manual.info
@settitle Ebib Manual

@documentencoding iso-8859-1

@iftex
@finalout
@end iftex

@titlepage
@title Ebib Manual
@author Joost Kremers
@end titlepage

@contents

@node Top, Installation, (dir), (dir)
@top Overview
@c Page published by Emacs Muse begins here









Ebib is a program with which you can manage BibTeX database files without
having to edit the raw @samp{.bib} files. It runs in GNU/Emacs, version 21.1 or
higher (lower versions are not supported) and XEmacs (at least from version
21.4; lower version have not been tested, but may work.)

It should be noted that Ebib is @emph{not} a minor or major mode for editing
BibTeX files. It is a program in itself, which just happens to make use of
Emacs as a working environment, in the same way that for example Gnus is.

The advantage of having a BibTeX database manager inside Emacs is that X is
no longer required, as Emacs can run on the console, and also that some
integration with Emacs' TeX and LaTeX modes becomes possible.  For example,
you can push a BibTeX key from Ebib to a LaTeX buffer, or, vice versa, when
you're in a LaTeX buffer, you can consult your BibTeX database and insert a
key from it into the document. Another advantage of Ebib is that it is
completely controlled by key commands: no stressful mouse movements are
required, as with most other (usually X-based) BibTeX database managers.


@menu
* Installation::                
* Basic Usage::                 
* Advanced Features::           
* The Ebib Buffers::            
* Customisation::               
@end menu

@node Installation, Basic Usage, Top, Top
@chapter Installation

To install Ebib, so that it will be loaded automatically when Emacs is
started, simply copy the file @samp{ebib.el} to somewhere in your load path and
add the following line to Emacs' init file (@samp{~/.emacs} for GNU/Emacs,
@samp{~/.xemacs/init.el} for XEmacs):

@example

(autoload 'ebib "ebib" "Ebib, a BibTeX database manager." t)

@end example

Note: if you do not know what your load path is set to, go to the @samp{*scratch*}
buffer, type @samp{load-path} on an empty line, put the cursor right after it and
type @samp{C-j}. The value of @samp{load-path} will then appear in the buffer.

When Ebib is loaded, you can run it with @samp{M-x ebib}. This command is also
used to return to Ebib when you have put the program in the background. You
can bind this command to a key sequence by putting something like the
following in Emacs' init file:

@example

(global-set-key "\C-ce" 'ebib)

@end example

You can of course choose any key combination you like. (In Emacs, key
combinations of @samp{C-c <letter>} are reserved for the user, so that no package
may set them.)

It is recommended to byte-compile the source, Ebib runs quite a lot faster
when it is byte-compiled. You can do this either within Emacs with @samp{M-x
byte-compile-file}, or from your shell by going into the directory where you
put @samp{ebib.el} and typing:

@example

emacs -batch -f batch-byte-compile ebib.el

@end example

(Substitute @samp{emacs} with @samp{xemacs} if you use XEmacs.) This will create a file
@samp{ebib.elc}, which Emacs will load instead of @samp{ebib.el}. Byte-compiling Ebib may
produce a warning about functions that are ``not known to be
defined''. This can be safely ignored. GNU Emacs and XEmacs have some small
differences, and the functions reported in this warning are those used by
the other version. Ebib makes sure that the correct functions are called.




@node Basic Usage, Advanced Features, Installation, Top
@chapter Basic Usage

A BibTeX database is somewhat of a free-form database. A BibTeX entry
consists of a set of field-value pairs. Furthermore, each entry is known by
a unique key. The way that Ebib navigates this database is by having two
windows, one that contains a list of all the entry keys in the database,
and one that contains the fields and values of the currently highlighted
entry.

When Ebib is started, the current windows in Emacs are hidden and the Emacs
frame is divided into two windows. The top one contains a buffer that is
called the @emph{index buffer}, while the lower window contains the @emph{entry
buffer}. When a database is loaded, the index buffer holds a list of all the
keys in the database. You can move through these keys with the cursor
keys. In the entry buffer, the fields of the currently highlighted entry
are shown, with their values.

In this chapter, all basic functions of Ebib are described, so that you can
get startet with it. At times, reference will be made to later chapters,
where more specific functions are described.



@menu
* Getting Started::             
* Editing the Database::        
* Saving a Database::           
* Searching::                   
* LaTeX Integration::           
* Cross-referencing::           
* Printing the Database::       
* Marking Entries::             
* Calling a Browser::           
* Viewing files::               
@end menu

@node Getting Started, Editing the Database, Basic Usage, Basic Usage
@section Getting Started

Ebib is started with the command @samp{M-x ebib}. Entering this command hides all
the windows in the current Emacs frame and replaces them with two windows:
the top one contains the index buffer, the bottom one, taking up the larger
part of the screen, contains the entry buffer. The index buffer is named
@samp{none}, to indicate that no database has been loaded. If you open a database,
or start a new one, the index buffer will carry its name.

You can quit Ebib by typing @samp{q}. You will be asked for confirmation, and you
will receive a warning if you happen to have an unsaved database. The
command @samp{z} can also be used to leave Ebib. However, unlike @samp{q}, which
completely quits Ebib, @samp{z} only lowers it, so that it remains active in the
background. The @samp{.bib} files that you have opened remain loaded, and you can
return to them by typing @samp{M-x ebib} again.


@menu
* Opening a @samp{.bib} file::  
* Navigating a @samp{.bib} file::  
* Starting a New @samp{.bib} File::  
@end menu

@node Opening a @samp{.bib} file, Navigating a @samp{.bib} file, Getting Started, Getting Started
@subsection Opening a @samp{.bib} file

Loading a @samp{.bib} file into Ebib is done with the command @samp{o}. Ebib reads the
file that you specify, and reports how many entries it found, how many
@samp{@@string} definitions it found, and whether a @samp{@@preamble} was found. Note that
when Ebib reads a @samp{.bib} file, it only reads entry types (e.g. @samp{book@comma{} article@comma{}
phdthesis} etc.) that it knows about. Fields (e.g. @samp{author@comma{} title@comma{} year} etc.)
that Ebib does not know about, are loaded (and saved) but not displayed, so
they cannot be edited. Therefore, you should make sure that all the entry
types and fields that your databases use are defined. A sensible set has
been predefined, so that anyone who's using standard BibTeX entry types
should have no problem loading an existing @samp{.bib} file into Ebib. If,
however, you have custom entry types, or custom fields in your @samp{.bib} files,
you should read the chapter on customising Ebib to learn how to define
them, so that Ebib knows about them. (See @ref{entry-types, Entry types}.)

Every time Ebib reads a @samp{.bib} file, it produces a few log messages. These
are written into a special buffer @samp{*Ebib-log*}. If Ebib encounters entry
types in the @samp{.bib} file that it doesn't know, it will log a warning. If Ebib
finds something that it believes to be incorrect, an error will be
logged. If any warnings or errors occur while loading the @samp{.bib} file, Ebib
tells you so after loading the file. To view the log file, press @samp{l} in the
index buffer.

Note that even if it detects warnings or errors, Ebib will try to continue
parsing the rest of the @samp{.bib} file. That means that normally, only the entry
in which an error occurs is not read. Entries occurring after the
problematic one are read.



@node Navigating a @samp{.bib} file, Starting a New @samp{.bib} File, Opening a @samp{.bib} file, Getting Started
@subsection Navigating a @samp{.bib} file

Once you've opened a @samp{.bib} file, the keys of all the entries in the file are
shown in alphabetical order in the index buffer in the top Ebib window. (In
fact, it is possible to show more than just the entry key in this
buffer. See @ref{index-display-fields, Index Display Fields} on how to accomplish this.) The first
entry is highlighted, meaning it is the current entry. The fields it holds
and their values are shown in the entry buffer in the bottom Ebib
window. The first field is the type field, which tells you what kind of
entry you're dealing with (i.e. @samp{book@comma{} article}, etc.).

Below the type field, Ebib displays (up to) three sets of fields. The first
set are the so-called obligatory fields, the fields that BibTeX requires to
be filled. The second group are the optional fields, which do not have to
be filled but which BibTeX will normally add to the bibliography if they do
have a value. The third group are the so-called additional fields. These
fields are usually ignored by BibTeX (note that BibTeX normally ignores
@emph{all} fields it does not know), although there are bibliography styles that
treat some of these fields as optional rather than as additional; (i.e.,
the @samp{harvard} styles do typeset the @samp{url} field, if present.)

The first two groups of fields are different for each entry type, while the
third group are common to all entry types. You can use the additional
fields, for example, to add personal comments to the works in your
database. Ebib by default defines the following additional fields:
@samp{crossref@comma{} url@comma{} annote@comma{} abstract@comma{} keywords@comma{} file} and @samp{timestamp}. If these are
not sufficient for you, you need to customise Ebib and add your own
fields. (See @ref{additional-fields, Additional Fields}, if you need to find out how to do that.)

To move around in the index buffer, you can use the @samp{up} and @samp{down} cursor
keys, @samp{C-p} and @samp{C-n}, or for those more used to mutt's key bindings, @samp{k} and
@samp{j}. Furthermore, @samp{Space} and @samp{PgDn} move a screenful of entries down, while @samp{b}
and @samp{PgUp} move in the other direction. Lastly, @samp{g} and @samp{Home} move to the first
entry, while @samp{G} and @samp{End} move to the last one.

Ebib is not restricted to opening just one @samp{.bib} file at a time. You can
open more files by just typing @samp{o} again and entering the filename. Ebib
numbers the databases: the number of each database is shown in the mode
line of the index buffer, directly before the database name. The keys 1---9
provide a quick way of jumping from one database to another. Note that the
numbering is dynamic: if you have three databases opened and then close the
second, database 3 becomes database 2.

With the @samp{left} and @samp{right} cursor keys, you can move to the previous or next
database. These keys wrap, so if you hit the @samp{left} cursor key while the
first database is active, you move to the last database. If you are done
with a database and want to close it, type @samp{c}. This closes the current
database. It does not leave Ebib, and all other databases you have open
will remain so.



@node Starting a New @samp{.bib} File,  , Navigating a @samp{.bib} file, Getting Started
@subsection Starting a New @samp{.bib} File

If you want to start a new @samp{.bib} file from scratch, you cannot just go and
enter entries. You first have to give the database a name. So, to start a
new database, type @samp{o} first, and give the new file a name. Once you have
done this, you can start adding entries to the database.




@node Editing the Database, Saving a Database, Getting Started, Basic Usage
@section Editing the Database

Of course, being able to open and view @samp{.bib} files is only half the fun. One
needs to be able to edit the files as well. Ebib's essential editing
facilities are discussed here.


@menu
* Adding and Deleting Entries::  
* Editing Fields Values::       
* Editing Multiline Values::    
* Copy::                        
@end menu

@node Adding and Deleting Entries, Editing Fields Values, Editing the Database, Editing the Database
@subsection Adding and Deleting Entries

To add an entry to a database, you type @samp{a}. When you do this, Ebib first
asks you for an entry key, as every entry must be identified by a unique
key. Just type a name for the new entry (say @samp{jones1998}). Since the entry
key must be unique, Ebib will complain if you enter a key that already
exists.

Note that if you should later decide that you want to change the key of an
entry, you can do so with the command @samp{E}. So if you have an entry with the
key @samp{jones1998} and you want to add another entry by Jones from 1998, you can
call the new one @samp{jones1998b} and rename the existing one to @samp{jones1998a}.

Deleting an entry is done with @samp{d}. Be careful with this: you will be asked
for confirmation, but once you've confirmed, the entry is gone, and it is
not possible to bring it back. There is no undo in Ebib. (If you haven't
saved the database yet, it is still possible to retrieve the deleted entry
from the @samp{.bib} file, and otherwise it may still be in the backup file that
Ebib creates. See @ref{saving-database, Saving a Database}.)



@node Editing Fields Values, Editing Multiline Values, Adding and Deleting Entries, Editing the Database
@subsection Editing Fields Values

Editing the field values for an entry is done in the lower of the two Ebib
buffers, the so-called entry buffer. You can move focus to the entry buffer
by typing the command @samp{e} in the index buffer.

You can move between fields with the same keys that you use to move between
entries in the index buffer: the cursor keys @samp{up} and @samp{down}, @samp{C-p} and @samp{C-n}, or @samp{j}
and @samp{k}. @samp{Space} and @samp{PgDn} move to the next set of fields, while @samp{PgUp} and @samp{b} move
to the previous set of fields. @samp{g} and @samp{G}, and @samp{Home} and @samp{End} also work as
expected.

Editing a field value can be done with @samp{e}. For most fields, Ebib simply asks
you for a string value in the minibuffer. (Here, @samp{RET} confirms the edit,
while @samp{C-g} cancels it.) Although BibTeX requires that field values be
surrounded by braces @{@} (or double quotes ``'', but Ebib does not use those,
even though it can of course handle them when they are used in an existing
@samp{.bib} file) you do not need to type these. Ebib adds them when it saves the
@samp{.bib} file.

Some fields, however, are handled in a special way. The first of these is
the @samp{type} field: if you edit this field, you must enter one of the
predefined entry types. Ebib won't allow you to enter anything else. You
can use tab-completion in this case. Similarly, if you edit the @samp{crossref}
field, Ebib requires that you fill in a key from the database. Here, too,
you can use tab-completion.

Note that if you're adding a new entry, Ebib automatically puts you in the
entry buffer after you've typed the entry key: you don't have to type @samp{e} to
move to the entry buffer. When creating a new entry, it is best to set the
@samp{type} field first, because the @samp{type} field determines which other fields are
available for an entry.

Note also that after editing a field, Ebib (usually) puts you on the next
field. This is convenient if you're creating a new entry and need to fill
out several fields in a row.

If you're done editing the fields of the entry, type @samp{q} to move focus back
to the index buffer. (Note: keys may have different functions in the index
buffer and the entry buffer. @samp{q} is a typical example: in the entry buffer,
it quits editing the entry and moves focus back to the index buffer. In the
index buffer, however, @samp{q} quits Ebib.)



@node Editing Multiline Values, Copy, Editing Fields Values, Editing the Database
@subsection Editing Multiline Values

Apart from the @samp{type} and @samp{crossref} field, there is another field that Ebib
handles in a special way when you edit its value. This is the @samp{annote}
field. Most field values normally consist of a single line of
text. However, because the @samp{annote} field is meant for creating annotated
bibliographies, it would not be very useful if you could only write one
line of text in this field. Therefore, when you edit the @samp{annote} field, Ebib
puts you in the so-called @emph{multiline edit buffer}. This is essentially a text
mode buffer that allows you to enter as much text as you like. To store the
text and leave the multiline edit buffer, type @samp{C-x b}. (This is of course
the standard Emacs command to switch buffers. It is redefined in Ebib's
multiline edit buffer.)

If you want to leave the multiline edit buffer without saving the text you
have just typed, you can use the command @samp{C-x k}. This too is redefined in
the multiline edit buffer: it leaves the multiline edit buffer (and hides
it), but it does not actually kill the buffer.

Multiline values are not restricted to the @samp{annote} field. Any field can in
fact hold a multiline value. (Except of course the @samp{type} and @samp{crossref}
fields.) To give a field a multiline value, use @samp{l} instead of @samp{e}. You will
again be put in the multiline edit buffer, where you can edit the
value. Note that you can use @samp{l} even if a field already has a single line
value. Ebib will just make that the first line in the multiline edit
buffer.

When a field has a multiline value, only the first line is shown in the
entry buffer, for space reasons. To indicate that the value is multiline, a
plus sign @samp{+} is placed in front of the value.

By the way, the @samp{e} key is smart about the way an entry must be edited. If
you press @samp{e} on a field that already has a multiline value, regardless of
the fact whether it is the @samp{annote} field or not, Ebib puts you in the
multiline edit buffer. Therefore, you need @samp{l} only if you want to give a
field a multiline value when it doesn't have one yet.

For more details on working with the multiline edit buffer, see
@ref{multiline-edit-buffer, The Multiline Edit Buffer}.



@node Copy,  , Editing Multiline Values, Editing the Database
@subsection Copy, cut, paste (yank), and delete

A few more commands are available when you're in the entry buffer editing
field values. The commands @samp{c}, @samp{x} and @samp{y} implement a copy and paste system: @samp{c}
copies the contents of the current field to the kill ring, @samp{x} kills the
contents of the current field to the kill ring, and @samp{y} yanks (pastes) the
most recently killed text in the kill ring. You can type @samp{y} repeatedly to
get the same effect you get in Emacs when you type @samp{M-y} after an initial
@samp{C-y}: every additional use of @samp{y} moves back in the kill ring.

Lastly, there is the command @samp{d}, which deletes the contents of the current
field, without asking questions and without storing the text in the kill
ring.

Note that @samp{y} only works when the current field does not have a value
yet. This is to prevent you from accidentally overwriting a field value. If
you do want to yank text into a field that already has a value, simply hit
@samp{d} first to delete the text.




@node Saving a Database, Searching, Editing the Database, Basic Usage
@section Saving a Database

@anchor{saving-database} When you have undertaken any kind of editing action on a database, it is
marked as modified, which is indicated in the mode line for the index
buffer. A modified database can be saved by typing @samp{s}. This saves the
database to the file it was loaded from without asking for
confirmation. (It is similar to @samp{C-x C-s} in Emacs.) If you're saving a file
for the first time after loading it, Ebib creates a backup file under the
same name appended with a tilde: @samp{<filename>.bib~}.

If you have multiple databases open, have made changes in more than one of
them, and want to save all of them without going through each yourself, you
can use @samp{S}. (That's a capital @samp{S}.) This command saves all modified databases.

Another way to save a database is to use the command @samp{w}. Use this if you
want to write the database to another file than the one it was loaded
from. Ebib will ask you for a filename to save to, and will of course warn
you if that file happens to exist already. Note that this command is
similar to @samp{C-x C-w} in Emacs, so that after using it, the new @samp{.bib} file
becomes associated with the database.



@node Searching, LaTeX Integration, Saving a Database, Basic Usage
@section Searching

@anchor{searching} Ebib provides several search methods. First, if you are in the index
buffer, the normal Emacs incremental searches, @samp{C-s} and @samp{C-r}, function as
expected. You can use them to search entry keys. Note that once you've
found the key you're searching, you must hit @samp{ENTER} to make it active. Ebib
does not update the entry buffer during incremental search, as this would
be rather pointless: you're only interested in the entry you're searching
for, not in the entries you pass along the way.

Of course, it is also possible to search the database itself. If you type
@samp{/}, Ebib asks you for a search term. This can be a regural expression, to
allow for flexibility in searching. After hitting @samp{ENTER}, Ebib will start
searching the database (starting from the current entry, @emph{not} from the first
entry!) and will display the entry with the first occurrence of the search
string that it finds. All the occurrences of the search string in that
entry are highlighted.

Ebib searches all the fields of each entry. It is not possible with @samp{/} to
specify the fields to search. Note that if the search term is found in a
field with a multiline value, Ebib will highlight the @samp{+} sign that it
displays in front of the field value. Keep an eye out for this when doing a
search, because Ebib only shows the first line of multiline values, and if
the search term appears in another line, the highlighted @samp{+} is the only
indication that the search term was found. (Well, that and the fact that
Ebib does @emph{not} say @samp{Search string not found}, of course@dots{})

A search term may of course appear more than once in the database. To
search for the next occurrence, type @samp{n}. This will continue searching for
the search string in the rest of the database. Again, the first entry found
to contain the search string is displayed. Note that @samp{n} does not wrap: if
the end of the database is reached, Ebib stops searching. To continue
searching from the top, hit @samp{g} and then @samp{n}.

The functions described here form Ebib's basic search functionality. Ebib
also has a much more powerful search mechanism in the form of @emph{virtual
databases}. These are described later. (See @ref{virtual-databases, Virtual Databases}.)



@node LaTeX Integration, Cross-referencing, Searching, Basic Usage
@section LaTeX Integration

Having a BibTeX database manager running inside Emacs has an additional
advantage: it makes it trivially easy to insert BibTeX keys in your LaTeX
documents.

Ebib provides two functions for this. First, if you're in a LaTeX buffer,
you can call the function @samp{ebib-insert-bibtex-key}. When you invoke this
command, Emacs prompts you for a key from the database(s) associated with
the current buffer. You can type the key, using TAB-completion, and after
hitting @samp{RET}, Emacs puts a BibTeX citation at the cursor position in the
current buffer with the key you selected.

You can also do it the other way around: if you're in the index buffer in
Ebib, you can @emph{push} an entry to a LaTeX buffer. To do this, use the key @samp{p}.
Ebib will ask you for a buffer to push the entry to, and will then insert
the string @samp{\cite@{<key>@}} at the current cursor position in the buffer you've
supplied.

By default, both @samp{ebib-insert-bibtex-key} and the command key @samp{p} in the index
buffer insert the key into the LaTeX buffer with command @samp{\cite}. It is
possible to change this, however. In fact, it is possible to define
multiple insertion strings, so that you can have Ebib insert a variety of
citation commands with an entry key. For details on defining and using
custom insertion strings, see @ref{insertion-strings, Insertion Strings}.

There is another function that is available outside Ebib:
@samp{ebib-entry-summary}. This command reads the key under the cursor in the
current buffer and displays the field values associated with that key in a
@samp{*Help*} buffer. This allows you to quickly check a reference in a text.

Probably the easiest way to use both @samp{ebib-insert-bibtex-key} and
@samp{ebib-entry-summary} is to bind them to a key sequence. For example, you
could put the following in your @samp{~/.emacs}:

@example

(add-hook 'LaTeX-mode-hook #'(lambda ()
          (local-set-key "\C-cb" 'ebib-insert-bibtex-key)))

@end example

This binds @samp{C-c b} to the command @samp{ebib-insert-bibtex-key} in AUCTeX's LaTeX
mode. (Note that commands of the form @samp{C-c <letter>} are reserved for the
user, and should therefore not be set by any package. For this reasons,
Ebib does not set this command automatically.)


@menu
* Consulting databases from within a LaTeX file::  
@end menu

@node Consulting databases from within a LaTeX file,  , LaTeX Integration, LaTeX Integration
@subsection Consulting databases from within a LaTeX file

The commands @samp{ebib-insert-bibtex-key} and @samp{ebib-entry-summary} must consult the
database or databases loaded in Ebib, and Ebib tries to be smart about
which database(s) to consult. Usually, a LaTeX file has a @samp{\bibliography}
command somewhere toward the end, which names the @samp{.bib} file or files that
contain the bibliography entries. If you consult a BibTeX database from
within a LaTeX file, Ebib first looks for a @samp{\bibliography} command, reads
the @samp{.bib} files from it, and then sees if those files happen to be open. If
they are, Ebib uses them to let you pick an entry key (in the case of
@samp{ebib-insert-entry-key}) or to search for the entry (in the case of
@samp{ebib-entry-summary}).

Of course, it may be the case that the LaTeX file is actually part of a
bigger project, and that only the master file contains a @samp{\bibliography}
command. To accommodate for this, Ebib checks whether the (buffer-local)
variable @samp{TeX-master} is set to a filename. If it is, it reads that file and
tries to find the @samp{\bibliography} command there. (Note: @samp{TeX-master} is an
AUCTeX variable, which is used to keep track of multi-file projects. If you
don't use AUCTeX, this functionality doesn't work, and Ebib will only check
the current file for a @samp{\bibliography} command.)

Note that if one of the @samp{.bib} files in the @samp{\bibliography} command isn't
loaded, Ebib issues a warning message about this, and continues to check
for the next @samp{.bib} file. These warning messages appear in the minibuffer,
but are probably directly overwritten again by further messages or prompts
Ebib produces, so check the @samp{*Messages*} buffer if Ebib doesn't seem to be
able to find an entry that you're sure is in one of your databases.

Another thing to keep in mind is that Ebib only looks for a @samp{\bibliography}
command once: the first time either @samp{ebib-insert-bibtex-entry} or
@samp{ebib-entry-summary} is called. It stores the result of this search and uses
it the next time either of these commands is used. Therefore, if you make a
change to the @samp{\bibliography} command, you must reload the file (use @samp{M-x
revert-buffer}) to make sure Ebib rereads the @samp{\bibliography} command.

If no @samp{\bibliography} command is found at all, either in the LaTeX file
itself, or in the master file, Ebib simply consults the current database,
i.e. the database that was active when Ebib was lowered with @samp{z}.




@node Cross-referencing, Printing the Database, LaTeX Integration, Basic Usage
@section Cross-referencing

@anchor{cross-referencing} BibTeX has a cross-referencing facility. Suppose you have an entry
@samp{jones1998}, which appeared in a book that is also in your database, say
under @samp{miller1998}. You can tell BibTeX that @samp{jones1998} is contained in
@samp{miller1998} by putting @samp{miller1998} in the @samp{crossref} field. When BibTeX finds
such a cross-reference, all the fields of @samp{jones1998} that don't have a value
inherit their values from @samp{miller1998}. At the very least, this saves you
some typing, but more importantly, if two or more entries cross-reference
the same entry, BibTeX automatically includes the cross-referenced entry in
the bibliography (and puts a reduced reference in the cross-referencing
entries).

When you fill in the @samp{crossref} field in Ebib, Ebib displays the values of
the cross-referenced entry in the entry buffer. To indicate that they are
just inherited values, they are marked with @samp{ebib-crossref-face}, which by
default is red. (You can customise it, of course. See the customisation
option @ref{crossref-face, Crossref Face}.) These values are just displayed for convenience:
otherwise, Ebib treats these fields as if they are empty. That is, they
cannot be edited (to edit them, you need to edit the cross-referenced
entry), and it's not possible to copy these values to the kill ring.

If you're viewing an entry that has a cross-reference, and want to go to
the cross-referenced entry you can type @samp{F}. This command reads the value of
the @samp{crossref} field and then displays that entry.

Note that if you want to use BibTeX's cross-referencing options, you need
to set the option @ref{save-xrefs-first, Save Xrefs first}. This tells Ebib to save all entries
with a @samp{crossref} field first in the @samp{.bib} file. Without this, BibTeX's
cross-referencing will not work reliably.



@node Printing the Database, Marking Entries, Cross-referencing, Basic Usage
@section Printing the Database

@anchor{printing-database} Sometimes it may be useful to have a @samp{.pdf} file or print-out of your
database. Although Ebib does not actually do the printing itself, it can
create a LaTeX file for you that you can compile and print. In fact, there
are two ways of doing this.

The first is the command @samp{L}. This command creates a simple LaTeX document
that essentially contains a <verb>\nocite@{*@}</verb> command followed by a
<verb>\bibliography</verb> command referring to the @samp{.bib} file belonging to
the current database. You can then run the usual sequence of LaTeX, BibTeX,
LaTeX, LaTeX on this file, creating a document containing a list of all the
references in your database.

The second command for printing a database is @samp{P}. This command also creates
a LaTeX file. However, instead of simply providing a
<verb>\nocite@{*@}</verb> command, @samp{P} creates a @samp{tabular} environment for each
entry in the database listing all the fields of that entry and their
values.

The difference between @samp{L} and @samp{P} should be obvious: with @samp{L}, you get a list of
references created by BibTeX. This means that the references look the way
they will when actually used in a document, but it also means that the list
only contains the information that BibTeX deems relevant.

With @samp{P} you get an overview of your database with @emph{all} the field values of
each entry, including the ones that BibTeX does not use. The entries are
not formatted as literature references, but in a way similar to how they
are shown in Ebib.

By default, @samp{P} only shows single-line field values. That is, multiline
values are normally excluded. If you want to include multiline values in
the print-out, you have to set the option @samp{Print Multiline} in Ebib's
customisation buffer. (See @ref{customisation-buffer, The Customisation Buffer}.) With this option set,
Ebib will include all multiline values in the LaTeX file that @samp{P}
creates. Note however that Ebib does not change anything about the
formatting of the text in a multiline value. So if you plan to make (heavy)
use of this option, make sure that the way you type your text conforms to
LaTeX's conventions (e.g. empty lines to mark paragraphs, etc.) and doesn't
contain any characters such as @samp{&} that are illegal in LaTeX. (Or,
alternatively, use LaTeX code in your multiline fields.)

As mentioned, when you use either @samp{L} or @samp{P}, Ebib creates a LaTeX file. More
precisely, it creates a temporary buffer and writes the LaTeX code into it,
and then saves the contents of that buffer to a file. After it has done
that, Ebib lowers itself and instruct Emacs to open the file in a buffer,
which will then be properly set up as a LaTeX buffer. From there you can
run LaTeX and view the result.

Before doing all this, Ebib asks you which file to write to. Be careful
with this: since this is supposed to be a temporary file, Ebib simply
assumes that if you provide a filename of an existing file, it can
overwrite that file without warning!

A better way to tell Ebib which file to use is to set the option @samp{Print
Tempfile} in Ebib's customisation buffer to some temporary file. When this
option is set, Ebib will always use this file to write to, and will not ask
you for a filename anymore when you type @samp{L} or @samp{P}.

There are two more customisation options for printing the database. These
are @samp{Print Preamble} and @samp{LaTeX Preamble}. With these options, you can specify
what Ebib should put in the preamble of the LaTeX files it creates. Use
this if you want to use specific packages
(e.g. <verb>\usepackage@{a4@}</verb> or
<verb>\usepackage@{times@})</verb>. This is especially useful for @samp{L}, since by
default, Ebib uses BibTeX's standard bibliography style. With the option
@samp{LaTeX Preamble} you can set your preferred bibliography style. Details are
discussed in the chapter on customisation, see @ref{customisation-buffer, The Customisation Buffer}.




@node Marking Entries, Calling a Browser, Printing the Database, Basic Usage
@section Marking Entries

Commands in the index buffer generally operate on one single entry, or on
all entries. For some, however, it may sometimes be useful to perform them
on more than one entry, but not necessarily all of them. This can be
achieved by marking entries. You can mark the entries you want to perform a
command on with the key @samp{m}. This marks (or unmarks) the current
entry. Marked entries are displayed in inverse video (in GNU Emacs) or
white on red (in XEmacs; note that the face properties of marked entries
can be customised through the customisation option @ref{marked-face, Marked Face}.)

Of the commands discussed so far, four can be used on marked entries: @samp{d}, @samp{p},
@samp{L} and @samp{P}. Note, however, that it is not enough to mark the entries you want
and then type any of these commands. If you do so, they will behave as if
no entries were marked. To get these commands to work on the marked
entries, you have to type a semicolon before them. That is, @samp{; d} deletes all
marked entries, and @samp{; L} and @samp{; P} create a LaTeX file of only the marked
entries. The command @samp{m} itself can also be used with the @samp{;} prefix. If there
are any marked entries, @samp{; m} unmarks them all. Otherwise, @samp{; m} marks all
entries.

@samp{; p} pushes all marked entries to a LaTeX buffer. It does so by putting them
all in a single @samp{\cite} command, separated by commas, not by putting them in
separate @samp{\cite} commands.



@node Calling a Browser, Viewing files, Marking Entries, Basic Usage
@section Calling a Browser

With more and more scientific literature becoming available on-line, it
becomes common to store URLs in a BibTeX database. Sometimes you may want
to load such a URL in your browser. Ebib provides a convenient way for
doing so.

If you type @samp{u} in the index buffer, Ebib takes the first URL stored in the
@samp{url} field of the current entry and passes it to your browser. Furthermore,
in the entry buffer, you can use @samp{u} on @emph{any} field. If you happen to have more
than one URL stored in the relevant field, and you want to pass the second
(or third, etc.) to the browser, you can use a prefix argument. So typing
@samp{M-2 u} sends the second URL to your browser, @samp{M-3 u} the third, and so on.

It is not even necessary that the relevant field contains @emph{only} URLs. It may
contain other text mixed with the URLs: Ebib simply searches the URLs in
the field and ignores the rest of the text. Ebib considers every string of
characters that starts with @samp{http://} or @samp{https://} and that does not contain
whitespace or any of the characters @samp{" ' <} or @samp{>} as a URL. Furthermore, Ebib
regards everything that is enclosed in a LaTeX <verb>\url@{@dots{}@}</verb>
command as a URL. This behaviour is controlled by a regular expression that
can be customised. (See @ref{url-regexp, Url Regexp}.)

There exists an Emacs function @samp{browse-url}, which provides a nifty interface
to calling an external browser. In principle, Ebib uses this
function. However, if this function is not present on your installation,
you can set the option @ref{browser-command, Browser Command} to call the browser.

As just explained, if you press @samp{u} in the index buffer, Ebib searches the
@samp{url} field of the current entry for URLs. If you have the habit of putting
your URLs in another field, however, you may change the customisation
option @ref{standard-url-field, Standard Url Field} and tell Ebib to use another field for searching
the URLs. (Keep in mind, though, that in the entry buffer, you can load a
URL from any field.)



@node Viewing files,  , Calling a Browser, Basic Usage
@section Viewing files

If you have electronic versions of the papers in your database stored on
your computer, you can use Ebib to call external viewers for these
files. The interface for this is similar to that for calling a browser: if
you press @samp{f} in the index buffer, Ebib searches the @samp{file} field for a
filename and when it finds one, calls an appropriate viewer.

Just as with @samp{u}, you can use @samp{f} in the entry buffer as well, in which case it
can be used on any field, not just the @samp{file} field. It is also possible to
have more than one filename in a field: you can select the one you want to
view with the prefix argument.

Just as in the case of URLs, you can customise several things about the
file view functionality. The option @ref{standard-file-field, Standard File Field} allows you to
customise the field that @samp{f} extracts filenames from when pressed in the
index buffer. Extracting filenames is done with a regular expression, which
can be customised through the option @ref{file-regexp, File Regexp}.

The option @ref{file-search-dirs, File Search Dirs} allows you to tell Ebib which directories it
needs to search for files. The default value is @samp{~}, which means Ebib just
looks in your home dir. Since this is probably not where you keep your
files, you may want to customise this. Note that you can specify more than
one directory.

Note that Ebib does not search directories recursively. It is possible,
however, to put subdirectories in the filenames. That is, if you put
something like @samp{a/abney1987.pdf} in the @samp{file} field, Ebib searches for the
relevant file in a subdirectory @samp{a/} of the directories listed in the option
@samp{File Search Dirs}. (Note that if you want to do this under Windows, you may
want to remove the backslash from the file regexp.)

Ebib can call different external programs depending on the file type of the
relevant file, but you have to specify which programs to call. The option
@ref{file-associations, File Associations} allows you to do this. By default, @samp{.pdf} and @samp{.ps} files are
handled, by @samp{xpdf} and @samp{gv}, respectively. You can specify further file types by
their extensions (do not include the dot). The program is searched for in
PATH, but you can of course specify the full path to the program.




@node Advanced Features, The Ebib Buffers, Basic Usage, Top
@chapter Advanced Features

The features discussed in the previous chapter should be sufficient to get
started using Ebib. However, Ebib has several more advanced features, which
are described in this chapter.


@menu
* Preloading @samp{.bib} files::  
* @samp{@@Preamble} Definition::  
* @samp{@@String} Definitions::  
* Sorting the @samp{.bib} file::  
* Merging and Importing::       
* Exporting Entries::           
* Timestamps::                  
* Multiple Identical Fields::   
* Virtual Databases::           
* The Multiline Edit Buffer::   
@end menu

@node Preloading @samp{.bib} files, @samp{@@Preamble} Definition, Advanced Features, Advanced Features
@section Preloading @samp{.bib} files

Chances are that you will be doing most of your work with one or a few @samp{.bib}
files, and you may find yourself opening the same file or files every time
you start Ebib. If so, you can tell Ebib to always load specific @samp{.bib} files
on startup. To do this, specify the files in Ebib's customisation buffer,
under the option @ref{preload-bib-files, Preload Bib Files}.



@node @samp{@@Preamble} Definition, @samp{@@String} Definitions, Preloading @samp{.bib} files, Advanced Features
@section @samp{@@Preamble} Definition

Apart from database entries, BibTeX allows three more types of elements to
appear in a @samp{.bib} file. These are @samp{@@comment}, @samp{@@preamble} and @samp{@@string}
definitions. Ebib provides facilities to handle the latter two. @samp{@@comment}
definitions cannot be added to a @samp{.bib} file through Ebib, and if Ebib finds
one in a @samp{.bib} file, it is simply ignored.

@samp{@@preamble} and @samp{@@string} definitions can be handled, however. Ebib allows you
to add one @samp{@@preamble} definition to the database.  In principle, BibTeX
allows more than one such definition, but really one suffices, because you
can use the concatenation character @samp{#} to include multiple TeX or LaTeX
commands. So, rather than having two @samp{@@preamble} definitions such as:

@example

@@preamble@{ "\newcommand@{\noopsort@}[1]@{@} " @}
@@preamble@{ "\newcommand@{\singleletter@}[1]@{#1@} " @}

@end example

you can write this in your @samp{.bib}
file:

@example

@@preamble@{ "\newcommand@{\noopsort@}[1]@{@} "
         # "\newcommand@{\singleletter@}[1]@{#1@} " @}

@end example

Creating or editing a @samp{@@preamble} definition in Ebib is done by hitting @samp{r} in
the index buffer. Ebib uses the multiline edit buffer for editing the text
of the @samp{@@preamble} definition, which means that as discussed above, @samp{C-x b}
stores the @samp{@@preamble} text and returns focus to the index buffer, while @samp{C-x
k} returns focus to the index buffer while abandoning any changes you may
have made. (For details on using the multiline edit buffer, see
@ref{multiline-edit-buffer, The Multiline Edit Buffer}.)

In order to create a @samp{@@preamble} as shown above in Ebib, you only have to
type the text between the braces.  Ebib takes care of including the braces
of the @samp{@@preamble} command, but otherwise it saves the text exactly as you
enter it. So in order to get the preamble above, you'd have to type the
following in Ebib:

@example

"\newcommand@{\noopsort@}[1]@{@} "
# "\newcommand@{\singleletter@}[1]@{#1@} "

@end example

Note that when Ebib loads a @samp{.bib} file that contains more than one @samp{@@preamble}
definition, it concatenates all the strings in them in the manner just
described and saves them in one @samp{@@preamble} definition.



@node @samp{@@String} Definitions, Sorting the @samp{.bib} file, @samp{@@Preamble} Definition, Advanced Features
@section @samp{@@String} Definitions

If you press @samp{t} in the index buffer, Ebib hides the entry buffer in the
lower window and replaces it with the @emph{strings buffer}. In this buffer, you
can add, delete and edit @samp{@@string} definitions.

Adding a @samp{@@string} definition is done with the command @samp{a}. This will first ask
you for an abbreviation and then for the value to be associated with that
abbreviation. Once you've entered these, Ebib will sort the new
abbreviation into the buffer.

Moving between the @samp{@@string} definitions can be done in the usual way: the
cursor keys @samp{up} and @samp{down}, @samp{C-p} and @samp{C-n} and @samp{k} and @samp{j} move up and down. @samp{Space}
and @samp{PgDn} move ten strings down, while @samp{b} and @samp{PgUp} move in the other
direction. The keys @samp{g}, @samp{G}, @samp{Home} and @samp{End} also function as expected.

To delete a @samp{@@string} definition, use @samp{d}. To edit the value of a definition,
use @samp{e}. There is also a command @samp{c}, which copies the value of the current
@samp{@@string} definition to the kill ring. Unlike in the entry buffer, there are
no corresponing commands @samp{y} and @samp{x}. (In fact, @samp{x} does exist, but has another
function.) Yanking from the kill ring can be done with @samp{C-y/M-y} in the
minibuffer when you edit a @samp{@@string}'s value. Cutting a @samp{@@string}'s value
is pointless, because a @samp{@@string} definition must have a value.

Having defined @samp{@@string} definitions, there must of course be a way to use
them. Just giving a field a string abbreviation as value will not do,
because Ebib puts braces around the value that you enter when it writes the
@samp{.bib} file, so that BibTeX will not recognise the abbreviation, and will not
expand it. BibTeX will only recognise an abbreviation if it appears in the
@samp{.bib} file outside of any braces.

To accomplish this, you must mark a field's value as @emph{raw}. A raw field is a
field whose value is not surrounded by braces when the database is saved,
so that BibTeX recognises it as an abbreviation. To mark a field raw, press
@samp{r}. An asterisk will appear before the field, indicating that it is
raw. Pressing @samp{r} again will change the field back to normal. If you press @samp{r}
on a field that does not have a value yet, Ebib will ask you for one.

Note that this also makes it possible to enter field values that are
composed of concatenations of strings and abbreviations. The BibTeX
documentation for example explains that if you have defined:

@example

@@string@{WGA = "World Gnus Almanac"@}

@end example

you can create a BibTeX field
like this:

@example

title = 1966 # WGA

@end example

which will produce ``1966 World
Gnus Almanac''. Or you can do:

@example

month = "1~" # jan

@end example

which will produce someting
like ``1 January'', assuming your bibliography style has defined the
abbreviation @samp{jan}. All this is possible with Ebib, simply by entering the
exact text including quotes or braces around the strings, and marking the
relevant field as raw.

An easy way to enter a @samp{@@string} abbreviation as a field value is to use the
key @samp{s} instead of @samp{e}. If you type @samp{s}, Ebib asks you for a @samp{@@string} abbreviation
to put in the current field, and automatically marks the field as raw. With
this command, Ebib only accepts @samp{@@string} definitions that are in the
database, so that by using @samp{s} you can make sure you don't make any
typos. Note that you can use tab completion to complete a partial string.



@node Sorting the @samp{.bib} file, Merging and Importing, @samp{@@String} Definitions, Advanced Features
@section Sorting the @samp{.bib} file

@anchor{sorting-bib-file} By default, the entries in the database are saved to the @samp{.bib} file in
alphabetical order according to entry key. If you only deal with the @samp{.bib}
file through Ebib, you may not care in which order the entries are
saved. However, it may sometimes be desirable to be able to specify the
sort order of entries in more detail. (Apparently, this can be useful with
ConTeXt, for example.)

You can specify a sort order in Ebib's customisation buffer. To sort the
entries, you must set at least one sort level (that is, a field to sort the
entries on). You can also specify more than one sort level: if two entries
have identical values for the first sort level, they will be sorted on the
second sort level. E.g., if the first sort level is @samp{author} and the second
is @samp{year}, then the entries are sorted by author, and those entries that have
identical values for the @samp{author} field are sorted by year.

A sort level is not restricted to a single field. You can specify more
fields for a single sort level. Within a single sort level, a second sort
field is used if the first sort field does not have a value. For example,
books that have an editor instead of an author will have an empty @samp{author}
field. If you sort the database on the @samp{author} field, such entries will all
appear at the beginning of the @samp{.bib} file, which is most likely not what you
want.

To remedy this, you can specify both the @samp{author} and the @samp{editor} fields for
the first sort level. Ebib will then sort an entry on its @samp{author} field if
it has a value, and will otherwise use the value of the @samp{editor} field.

The difference between two sort fields within one sort level and two sort
levels is that a second sort @emph{field} is an alternative for the first field
when it has no value, while a second sort @emph{level} is an additional sort
criterion when two or more entries cannot be sorted on the first level,
because they have identical values.

By default, the option @samp{Sort Order} has no value, which means that the
entries in the @samp{.bib} file are sorted according to entry key. Those that wish
to customise the sort order will usually want to set the first sort level
to @samp{author editor}, and the second to @samp{year}. In that way, the entries in the
@samp{.bib} file are sorted according to author/editor, and entries with the same
author/editor are sorted by year.

Entries that cannot be sorted on some sort level, because the sort fields
are empty, are sorted on entry key. (Keep in mind that if the first sort
level yields @emph{no value} for a specific entry, Ebib does @emph{not} use the second
sort level to sort that entry. It uses the entry key. The second sort level
is only used if the first yields @emph{identical} values for two or more entries.)

Note that if you have set the option @samp{Save Xrefs First} (see
@ref{cross-referencing, Cross-referencing}), it is pointless to set a sort order. Saving
cross-referencing entries first messes up any sort order, so Ebib simply
ignores the sort order if @samp{Save Xrefs First} is set.



@node Merging and Importing, Exporting Entries, Sorting the @samp{.bib} file, Advanced Features
@section Merging and Importing

As described in the previous chapter, adding entries to a database can be
done manually with the key @samp{a}. There are other ways of adding entries to a
database, however.

With the command @samp{M} you can merge a second @samp{.bib} file into your current
database. When you hit @samp{M}, you are asked for a filename. Ebib then reads the
entries in this file and adds them to the database. Duplicate entries (that
is, entries with an entry key that already exists in the database) will not
be loaded. Ebib logs a warning about each duplicate entry to its log
buffer, and displays a warning after loading the @samp{.bib} file when this
happens.

Another way to add entries to a database is to import them from an Emacs
buffer. If, for example, you find ready-formatted BibTeX entries in a text
file or e.g. on the internet, you can copy & paste them to any Emacs buffer
(e.g. the @samp{*scratch*} buffer), and then execute the command @samp{M-x
ebib-import}. Ebib then goes through the buffer and loads all BibTeX entries
it finds into the current database (i.e. the database that was active when
you lowered Ebib). If you call @samp{ebib-import} while the region is active, Ebib
only reads the BibTeX entries in the region.



@node Exporting Entries, Timestamps, Merging and Importing, Advanced Features
@section Exporting Entries

Sometimes it can be useful to copy entries from one database to another, or
to create a new @samp{.bib} file with several entries from an existing
database. For this purpose, Ebib provides exporting facilities. To export
an entry to a @samp{.bib} file, use the command @samp{x}. Ebib will ask you for a
filename to export the entry to. (If you have already exported an entry
before, Ebib will present the filename you used as default, but you can of
course change it.)

For obvious reasons, Ebib appends the entry to the file that you enter if
it already exists, it does not overwrite the file. If this is not what you
want, delete the file first, as Ebib provides no way to do this.

If you have more than one database open in Ebib, it is also possible to
copy entries from one database to another. To do this, use the @samp{x} command
with a numeric prefix argument. E.g., if the database you want to export an
entry to is the second database, type @samp{M-2 x} to export the current entry to
it. The number of the database is given in the modeline of the index
buffer.

If the database you're copying an entry to already contains an entry with
the same entry key, Ebib won't copy the entry, and issues an appropriate
warning message.

Note that the command @samp{x} can operate on marked entries. So to export several
entries in one go mark them and type @samp{; x}. You can use a prefix argument in
the normal way: @samp{M-2 ; x} exports the marked entries to database 2.

Apart from entries, it is also possible to export the @samp{@@preamble} and @samp{@@string}
definitions. The @samp{@@preamble} definition is exported with the command @samp{X} in the
index buffer. @samp{@@string} definitions can be exported in the strings buffer: @samp{x}
in this buffer exports the current string, while @samp{X} exports all @samp{@@string}
definitions in one go. All these commands function in the same way: when
used without a prefix argument, they ask for a filename, and then append
the relevent data to that file. With a numeric prefix argument, they copy
the relevant data to the corresponding open database.



@node Timestamps, Multiple Identical Fields, Exporting Entries, Advanced Features
@section Timestamps

@anchor{timestamps} Ebib provides the possibility to add a timestamp to every new entry,
recording the time it was added to the database. The timestamp is recorded
in the (additional) field @samp{timestamp}. (By default, this field is not shown,
but you can make it visible by pressing @samp{H} in the index buffer.)

You can tell Ebib to create timestamps by setting the option @samp{Use Timestamp}
in Ebib's customisation buffer. With this option set, a timestamp is
included in entries added to the database with @samp{a}. Ebib will also add a
timestamp to entries imported from a buffer or merged from a file, and to
entries exported to another database or to a file. When importing or
exporting entries, existing timestamps will be overwritten. The logic
behind this is that the timestamp records the date and time when the entry
was added to the database, not when it was first created.

Note that if this option is unset, the timestamp of an entry is retained
when it's imported or exported. Therefore, if you record timestamps and
want to im-/export entries without changing their timestamps, temporarily
unset this option.

Ebib uses the function @samp{format-time-string} to create the timestamp. The
format string that Ebib uses can be customised in Ebib's customisation
buffer. The default string is @samp{"%a %b %e %T %Y"}, which produces a timestamp
of the form @samp{"Mon Mar 12 01:03:26 2007"}. Obviously, this string is not
suited for sorting, so if you want to be able to sort on timestamps, you'll
need to customise the format string. See the documentation for
@samp{format-time-string} on the options that are available.



@node Multiple Identical Fields, Virtual Databases, Timestamps, Advanced Features
@section Multiple Identical Fields

@anchor{multiple-identical-fields} Under normal circumstances, a BibTeX entry only contains one occurrence of
each field. If BibTeX notices that an entry contains more than one
occurrence of an obligatory or optional field, it issues a warning. Ebib is
somewhat less gracious, it simply takes the value of the last occurrence
without giving any warning. (Note, by the way, that BibTeX will use the
value of the @emph{first} occurrence, not the last.) When additional fields appear
more than once in an entry, BibTeX does not warn you, since it ignores
those fields anyway. Here, too, Ebib's standard behaviour is to ignore all
but the last value.

However, some online reference management services ``use'' this feature of
BibTeX in that they put multiple @samp{keywords} fields in the BibTeX entries that
they produce. If you were to import such an entry into Ebib, you would lose
all your keywords except the last one. To remedy this, you can tell Ebib
that it should allow multiple occurrences of a single field in a BibTeX
entry. You can do this by setting the customisation option
@ref{allow-identical-fields, Allow Identical Fields}.

With this option set, Ebib collapses the multiple occurrences into a single
occurrence. All the values of the different occurrences are collected and
stored in the single occurrence, separated by semicolons. That is, Ebib
does not retain the multiple occurrences, but it does retain the values. So
suppose you have an entry that contains the following @samp{keywords} fields:

@example

@@book@{jones1998,
    author = @{Jones, Joan@},
    year = @{1998@},
    ...
    keywords = @{sleep@},
    keywords = @{winter@},
    keywords = @{hybernation@}
@}

@end example

If you load this entry into Ebib with the option @samp{Allow Identical Fields}
set, you will get the following:

@example

@@book@{jones1998,
    author = @{Jones, Joan@},
    year = @{1998@},
    ...
    keywords = @{sleep; winter; hybernation@}
@}

@end example



@node Virtual Databases, The Multiline Edit Buffer, Multiple Identical Fields, Advanced Features
@section Virtual Databases

@anchor{virtual-databases} In the previous chapter, Ebib's basic search functionality was
discussed. (See @ref{searching, Searching}.) Ebib also provides a much more sophisticated
search and filtering mechanism in the form of @emph{virtual databases}.

A virtual database is a database that is not associated with any @samp{.bib}
file. Rather, it is created from another database by selecting entries from
it based on a specific search pattern, called a @emph{filter}. This allows you,
for example, to select all entries from a database that contain the string
``Jones'' in their @samp{author} field. A filter can be as complex as you want:
you can select all entries that do @emph{not} contain ``Jones'' in the @samp{author}
field, or all entries that contain ``Jones'' in either the @samp{author} or the
@samp{editor} field, or all entries that contain ``Jones'' in the @samp{author} field,
and ``symbiotic hybernation'' in the @samp{keyword} field, etc. Basically, the
filter can consist of an arbitray number of search criteria combined with
the logical operators @samp{and@comma{} or} and @samp{not}.


@menu
* Simple Selection::            
* Complex Filters::             
* Properties of Virtual Databases::  
@end menu

@node Simple Selection, Complex Filters, Virtual Databases, Virtual Databases
@subsection Simple Selection

Creating a virtual database is simple: press @samp{&}, and Ebib will ask you for a
field to select on, and for a regular expression to select with. So if you
want to select all entries that contain ``Jones'' in the @samp{author} field, you
press @samp{&} and type @samp{author} as the field and @samp{Jones} as the regexp to filter on.

Ebib will then create a virtual database containing the entries matching
your selection criterion. A virtual database has the same name as the
database it is based on, prepended with @samp{V:}. It also has a number like any
other database, and you can move back and forth to other databases with the
number or cursor keys.

If you don't want to filter on one specific field but rather want to select
all entries that match a certain regexp in any field, you can type @samp{any} as
the field to filter on. So specifying @samp{any} as the field and @samp{Jones} as the
regexp, the virtual database will select all entries that have a field that
contains ``Jones'' in them.



@node Complex Filters, Properties of Virtual Databases, Simple Selection, Virtual Databases
@subsection Complex Filters

Once you have a virtual database, it remains associated with the database
it was created from. This means that you can refine or extend the selection
(i.e. the filter) that the virtual database is based on. If, in the current
example, you want to include all the entries that have ``Jones'' in the
@samp{editor} field, you have to perform a logical @samp{or} operation: you want to
select an entry if it contains ``Jones'' in the @samp{author} field (which you
already did) @emph{or} if it contains ``Jones'' in the @samp{editor} field.

A short sidenote: the first impulse in a case like this might be to use @samp{and}
instead of @samp{or}: after all, you want to select all entries that contain
``Jones'' in the @samp{author} field @emph{and} all entries that contain ``Jones'' in the
@samp{editor} field. However, the filter that you build up is used to test each
entry @emph{individually} whether it meets the selection criterion. An entry meets
the criterion if it contains ``Jones'' in the @samp{author} field @emph{or} if it
contains ``Jones'' in the @samp{editor} field. Therefore, @samp{or} is the required
operator in this case. If you would use @samp{and}, you would only get those
entries that contain ``Jones'' in both the @samp{author} @emph{and} @samp{editor} fields.

To perform a logical @samp{or} operation, press the key @samp{|}. As before, you will be
asked which field you want to filter on, and which regexp you want to
filter with. Ebib will then update the virtual database with all entries in
the original database that match the additional criterion.

It is also possible to perform a logical @samp{and} on the virtual database. Use
this if you want to select those entries that contain ``Jones'' in the
@samp{author} field and e.g. ``symbiotic hybernation'' in the @samp{keyword} field. A
logical @samp{and} operation is done with the key @samp{&}. (Note: this is the same key
that is used to create a virtual database. In fact, you can also create a
virtual database with @samp{|}: when used in a normal database, @samp{&} and @samp{|} are
equivalent. They are only different in virtual databases.)

Both the @samp{&} and @samp{|} commands can be used with the negative prefix argument @samp{M--}
(or @samp{C-u -}, which is identical). In this case, the search criterion is
negated. That is, the negative prefix argument performs a logical @samp{not}
operation on the search criterion.

That is, if you want to select all entries from a database that do @emph{not}
contain ``Jones'' in the @samp{author} field, you can do this by typing @samp{M-- &} and
then filling out the relevant field and regexp. This prefix argument is
available both in real and in virtual databases.

There is another way of performing a logical @samp{not} operation, which is only
available in virtual databases: by pressing the key @samp{~}, you invert the
current filter. That is, if you have a virtual database with all the
entries containing ``Jones'' in the @samp{author} or in the @samp{editor} field, and you
press @samp{~}, the selection is inverted, and now contains all entries that do
@emph{not} have ``Jones'' in the @samp{author} or @samp{editor} field.

Although @samp{~} and the negative prefix argument to @samp{&} or @samp{|} both perform logical
@samp{not} operations, they are @emph{not} equivalent: @samp{~} negates the entire filter built
up so far, while the negative prefix argument only negates the single
selection criterion you enter with it.

If you want to know what the filter for the current virtual database is
exactly, you can type @samp{V}. This command displays the current filter in the
minibuffer. The filter is specified as a Lisp expression, meaning that the
operators appear before their operands, not in between them. That is, @samp{x and
y} is written as @samp{(and x y)}.

With a prefix argument (any prefix argument will do), the command @samp{V} not
only displays the current filter, but also reapplies it. This can be useful
when you've made changes to the source database: Ebib does not
automatically update a virtual database when its source database is
modified.



@node Properties of Virtual Databases,  , Complex Filters, Virtual Databases
@subsection Properties of Virtual Databases

Virtual databases differ from normal databases in several ways. First, they
cannot be modified: you cannot add or delete entries, and you cannot modify
the contents of fields. It is also not possible to import entries to them
or merge another file with them. Furthermore, it is not possible to export
entries to them or from them.

A virtual database cannot be saved in the normal way with @samp{s}, and the
command @samp{S} to save all databases ignores virtual databases. If you want to
save a virtual database, you can use the command @samp{w}. This command not only
saves the virtual database, it also changes it into a normal database, and
detaches it from its original source database, so that you can modify it
without affecting the source database.

The command @samp{L} also doesn't work with virtual databases. The reason for this
is that the virtual database is not associated with an actual @samp{.bib} file, so
there is no file to create a list of references from. However, it is
possible to use the command @samp{P} with a virtual database to create a list of
entries. See @ref{printing-database, Printing the Database}, for details on these two commands.




@node The Multiline Edit Buffer,  , Virtual Databases, Advanced Features
@section The Multiline Edit Buffer

@anchor{multiline-edit-buffer} As mentioned several times before, Ebib has a special multiline edit
buffer, which is used to edit field values that contain newlines (so-called
@emph{multiline fields}), and also to edit the contents of the @samp{@@preamble}
command. This section discusses the details of this buffer.

Ebib enters multiline edit mode in one of three cases: when you press @samp{P} in
the index buffer, to edit the @samp{@@preamble} definition, when you hit @samp{l} in the
entry buffer to edit the current field as multiline, or when you hit @samp{e} on
the @samp{annote} field, or on a field whose value already is multiline.

The multiline edit buffer uses a special major mode,
@samp{ebib-multiline-edit-mode}, which is derived from @samp{text-mode}. The changes with
respect to @samp{text-mode} are minor (see below), which means that any
customisations you may have made to @samp{text-mode} will be available in the
multiline edit buffer.

The settings that are specific for @samp{ebib-multiline-edit-mode} are the
functions assigned to the key sequences @samp{C-x b}, @samp{C-x k} and @samp{C-x C-s}. These key
sequences do not have their usual functions, but rather are redefined to
fit Ebib. Both @samp{C-x b} and @samp{C-x k} can be used to leave the multiline edit
buffer. @samp{C-x b} will store the text as it is to the database, while @samp{C-x k}
leaves the multiline edit buffer @emph{without} storing the text, i.e., the
original value of the field or preamble that you were editing is
retained. If the text in the buffer was modified, @samp{C-x k} asks you if you
really want to abandon your changes.

If you leave the multitiline edit buffer with @samp{C-x b} when the buffer is
empty (i.e., you deleted all the text, including the final newline), and
you were editing a field value or the @samp{@@preamble} definition, the field value
or preambleis deleted. (This is in fact the @emph{only} way to delete the
@samp{@@preamble} definition. Field values on the other hand can also be deleted by
hitting @samp{x} or @samp{d} on them in the entry buffer.)

The third command that is redefined in the multiline edit buffer is @samp{C-x
C-s}. This command can be used to save the database. Because Ebib does not
do an autosave of the current database, it is advisable to save the
database manually every now and then to prevent data loss in case of
crashes. It would be annoying to have to leave the multiline edit buffer
every time you want to do this, so @samp{C-x C-s} has been redefined to allow you
to do this from within the buffer.




@node The Ebib Buffers, Customisation, Advanced Features, Top
@chapter The Ebib Buffers

@anchor{ebib-buffers} This chapter lists all the key commands that exist in Ebib, with a short
description and the actual command that they call. The latter information
is needed if you want to customise Ebib's key bindings. (See
@ref{modifying-key-bindings, Modifying Key Bindings}.)



@menu
* The Index Buffer::            
* The Entry Buffer::            
* The Strings Buffer::          
@end menu

@node The Index Buffer, The Entry Buffer, The Ebib Buffers, The Ebib Buffers
@section The Index Buffer

@table @strong
@item @samp{Up}
go to previous entry. @samp{(ebib-prev-entry)}

@item @samp{Down}
go to next entry. @samp{(ebib-next-entry)}

@item @samp{Right}
move to the next database. @samp{(ebib-next-database)}

@item @samp{Left}
move to the previous database. @samp{(ebib-prev-database)}

@item @samp{PgUp}
scroll the index buffer down. @samp{(ebib-index-scroll-down)}

@item @samp{PgDn}
scroll the index buffer up. @samp{(ebib-index-scroll-up)}

@item @samp{Home}
go to first entry. @samp{(ebib-goto-first-entry)}

@item @samp{End}
go to last entry. @samp{(ebib-goto-last-entry)}

@item @samp{Return}
make the entry under the cursor current. Use after e.g. @samp{C-s}.
@samp{(ebib-select-entry)}

@item @samp{Space}
equivalent to @samp{PgDn}.

@item @samp{1-9}
jump to the corresponding database.

@item @samp{/}
search the database. @samp{(ebib-search)}

@item @samp{&}
Create a virtual database, or perform a logical @samp{and} on the current
virtual database. With negative prefix argument: apply a logical @samp{not} to the
selectional criterion. @samp{(ebib-virtual-db-and)}

@item @samp{|}
Create a virtual database, or perform a logical @samp{or} on the current
virtual database. With negative prefix argument: apply a logical @samp{not} to the
selectional criterion. @samp{(ebib-virtual-db-or)}

@item @samp{~}
Perform a logical @samp{not} on the current virtual
database. @samp{(ebib-virtual-db-not)}

@item @samp{a}
add an entry. @samp{(ebib-add-entry)}

@item @samp{b}
equivalent to @samp{Pgup}.

@item @samp{c}
close the database. @samp{(ebib-close-database)}

@item @samp{C}
customise Ebib. @samp{(ebib-customize)}

@item @samp{d}
delete the current entry. @samp{(ebib-delete-entry)}

@item @samp{; d}
delete all marked entries.

@item @samp{e}
edit the current entry. @samp{(ebib-edit-entry)}

@item @samp{E}
edit the key of the current entry. @samp{(ebib-edit-keyname)}

@item @samp{f}
extract a filename from the @samp{file} field and send it to an
appropriate viewer. With numeric prefix argument, extract the @emph{n}-th
filename.

@item @samp{F}
follow @samp{crossref} field. @samp{(ebib-follow-crossref)}

@item @samp{g}
equivalent to @samp{Home}.

@item @samp{G}
equivalent to @samp{End}.

@item @samp{h}
show help for the index buffer. @samp{(ebib-index-help)}

@item @samp{H}
show/hide hidden fields. @samp{(ebib-toggle-hidden)}

@item @samp{j}
equivalent to @samp{Down}.

@item @samp{J}
jump to another database. This accepts a numeric prefix argument,
but will ask you for a database number if there is
none. @samp{(ebib-switch-to-database)}

@item @samp{k}
equivalent to @samp{Up}.

@item @samp{l}
show the log buffer. (@samp{ebib-show-log})

@item @samp{L}
create a LaTeX file from the current database that produces a list
of references formatted by BibTeX. @samp{(ebib-latex-database)}

@item @samp{; L}
create a LaTeX file with the marked entries only.

@item @samp{m}
mark (or unmark) the current entry. @samp{(ebib-mark-entry)}

@item @samp{; m}
unmark all marked entries.

@item @samp{M}
merge a @samp{.bib} file. @samp{(ebib-merge-bibtex-file)}

@item @samp{n}
find next occurrence of the search string. @samp{(ebib-search-next)}

@item @samp{C-n}
equivalent to @samp{Down}.

@item @samp{M-n}
equivalent to @samp{PgDn}.

@item @samp{o}
open a @samp{.bib} file. @samp{(ebib-load-bibtex-file)}

@item @samp{p}
push an entry to a LaTeX buffer @samp{(ebib-push-entry-key)}

@item @samp{; p}
push the marked entries to a LaTeX buffer.

@item @samp{C-p}
equivalent to @samp{Up}.

@item @samp{M-p}
equivalent to @samp{PgUp}.

@item @samp{P}
create a LaTeX file for printing the database, listing the entire
contents of each entry. @samp{(ebib-print-database)}

@item @samp{; P}
create a LaTeX file with the marked entries.

@item @samp{r}
show and edit the @samp{@@preamble} definition in the
database. @samp{(ebib-edit-preamble)}

@item @samp{q}
quit Ebib. This sets all variables to nil, unloads the database(s)
and quits Ebib. @samp{(ebib-quit)}

@item @samp{s}
save the database. @samp{(ebib-save-current-database)}

@item @samp{S}
save all modified databases. @samp{(ebib-save-all-databases)}

@item @samp{t}
show and edit the @samp{@@string} definitions in the
database. @samp{(ebib-edit-strings)}

@item @samp{u}
extract a URL from the @samp{url} field and send it to a browser. With
numeric prefix argument, extract the @emph{n}-th url.

@item @samp{V}
Display the filter of the current virtual database in the
minibuffer. With prefix argument: reapply the filter. @samp{(ebib-print-filter)}

@item @samp{w}
write the database to a different file. @samp{(ebib-write-database)}

@item @samp{x}
export the current entry to a file, or, when used with numeric
prefix argument, to another database. @samp{(ebib-export-entry)}

@item @samp{; x}
export the marked entries to a file, or, when used with a numeric
prefix argument, to another database.

@item @samp{C-x b}
equivalent to @samp{z}.

@item @samp{C-x k}
equivalent to @samp{q}.

@item @samp{X}
export the @samp{@@preamble} definition to a file or, when used with a
numeric prefix argument, to another database. @samp{(ebib-export-preamble)}

@item @samp{z}
lower Ebib. @samp{(ebib-lower)}
@end table

One function is not bound to any key: @samp{ebib-print-filename}.


@node The Entry Buffer, The Strings Buffer, The Index Buffer, The Ebib Buffers
@section The Entry Buffer

@table @strong
@item @samp{Up}
go to the previous field. @samp{(ebib-prev-field)}

@item @samp{Down}
go to the next field. @samp{(ebib-next-field)}

@item @samp{PgUp}
go to the previous set of fields. @samp{(ebib-goto-prev-set)}

@item @samp{PgDn}
go to the next set of fields. @samp{(ebib-goto-next-set)}

@item @samp{Home}
go to the first field. @samp{(ebib-goto-first-field)}

@item @samp{End}
go to the last field. @samp{(ebib-goto-last-field)}

@item @samp{Space}
equivalent to @samp{PgDn}.

@item @samp{b}
equivalent to @samp{PgUp}.

@item @samp{c}
copy the contents of the current field to the kill
ring. @samp{(ebib-copy-field-contents)}

@item @samp{d}
delete the value of the current field. The deleted contents will @emph{not}
be put in the kill ring, and is therefore irretrievably
lost. @samp{(ebib-delete-field-contents)}

@item @samp{e}
edit the current field. @samp{(ebib-edit-fields)}

@item @samp{f}
extract a filename from the current field and send it to an
appropriate viewer. With numeric prefix argument, extract the @emph{n}-th
filename.

@item @samp{g}
equivalent to @samp{Home}.

@item @samp{G}
equivalent to @samp{End}.

@item @samp{h}
show help for the entry buffer. @samp{(ebib-entry-help)}

@item @samp{j}
go to the next field. @samp{(ebib-next-field)}

@item @samp{k}
go to the previous field. @samp{(ebib-prev-field)}

@item @samp{l}
edit the current field as multiline. @samp{(ebib-edit-multiline-field)}

@item @samp{C-n}
equivalent to @samp{Down}.

@item @samp{M-n}
equivalent to @samp{PgDn}.

@item @samp{C-p}
equivalent to @samp{Up}.

@item @samp{M-p}
equivalent to @samp{PgUp}.

@item @samp{q}
quit editing the current entry and return focus to the index
buffer. @samp{(ebib-quit-entry-buffer)}

@item @samp{r}
toggle a field's ``raw'' status. @samp{(ebib-toggle-raw)}

@item @samp{s}
insert an abbreviation from the @samp{@@string} definitions in the
database. @samp{(ebib-insert-abbreviation)}

@item @samp{u}
extract a URL from the current field and send it to a browser. With
numeric prefix argument, extract the @emph{n}-th url.

@item @samp{x}
cut the contents of the current field. Like @samp{c}, @samp{x} puts the contents
of the current field in the kill ring. @samp{(ebib-cut-field-contents)}

@item @samp{y}
yank the last element in the kill ring to the current
field. Repeated use of @samp{y} functions like @samp{C-y/M-y}. Note that no text will be
yanked if the field already has a value. @samp{(ebib-yank-field-contents)}
@end table



@node The Strings Buffer,  , The Entry Buffer, The Ebib Buffers
@section The Strings Buffer

@table @strong
@item @samp{Up}
go to the previous string. @samp{(ebib-prev-string)}

@item @samp{Down}
go to the next string. @samp{(ebib-next-string)}

@item @samp{PgUp}
go ten strings up. @samp{(ebib-strings-page-up)}

@item @samp{PgDn}
go ten strings down. @samp{(ebib-strings-page-down)}

@item @samp{Home}
go to the first string. @samp{(ebib-goto-first-string)}

@item @samp{End}
go to the last string. @samp{(ebib-goto-last-string)}

@item @samp{Space}
equivalent to @samp{PgDn}.

@item @samp{a}
add a new @samp{@@string} definition. @samp{(ebib-add-string)}

@item @samp{b}
equivalent to @samp{PgUp}.

@item @samp{c}
copy the text of the current string to the kill
ring. @samp{(ebib-copy-string-contents)}

@item @samp{d}
delete the current @samp{@@string} definition from the database. You will be
asked for confirmation. @samp{(ebib-delete-string)}

@item @samp{e}
edit the value of the current string. @samp{(ebib-edit-string)}

@item @samp{g}
equivalent to @samp{Home}.

@item @samp{G}
equivalent to @samp{End}.

@item @samp{h}
show help for the strings buffer. @samp{(ebib-strings-help)}

@item @samp{j}
equivalent to @samp{Down}.

@item @samp{k}
equivalent to @samp{Up}.

@item @samp{l}
edit the value of the current string as
multiline. @samp{(ebib-edit-multiline-string)}

@item @samp{C-n}
equivalent to @samp{Down}.

@item @samp{M-n}
equivalent to @samp{PgDn}.

@item @samp{C-p}
equivalent to @samp{Up}.

@item @samp{M-p}
equivalent to @samp{PgUp}.

@item @samp{q}
quit the strings buffer and return focus to the index
buffer. @samp{(ebib-quit-strings-buffer)}

@item @samp{x}
export the current @samp{@@string} definition to a file or, when used with a
prefix argument, to another database. @samp{(ebib-export-string)}

@item @samp{X}
export all the @samp{@@string} definitions to a file or, when used with a
prefix argument, to another database. @samp{(ebib-export-all-strings)}
@end table




@node Customisation,  , The Ebib Buffers, Top
@chapter Customisation

@anchor{customisation} Ebib can be customised through Emacs' standard customisation interface. The
only thing that cannot be customised in this way are the key bindings. If
you wish to customise those, you have to use the file @samp{~/.ebibrc}.


@menu
* The Customisation Buffer::    
* Modifying Key Bindings::      
@end menu

@node The Customisation Buffer, Modifying Key Bindings, Customisation, Customisation
@section The Customisation Buffer

@anchor{customisation-buffer} Ebib's customisation group is a subgroup of the @samp{Tex} group. It can be
invoked by typing @samp{M-x customize-group RET ebib RET}, or by pressing @samp{C} in
the index buffer. This chapter gives a short description of all the options
available in the customisation buffer.


@menu
* Default Type::                
* Preload Bib Files::           
* Additional Fields::           
* Index Window Size::           
* Index Display Fields::        
* Insertion Strings::           
* Sort Order::                  
* Save Xrefs First::            
* Crossref Face::               
* Marked Face::                 
* Use Timestamp::               
* Timestamp Format::            
* Standard Url Field::          
* Url Regexp::                  
* Browser Command::             
* Standard File Field::         
* File Associations::           
* File Regexp::                 
* File Search Dirs::            
* Print Preamble::              
* Print Multiline::             
* Latex Preamble::              
* Print Tempfile::              
* Allow Identical Fields::      
* Entry Types::                 
@end menu

@node Default Type, Preload Bib Files, The Customisation Buffer, The Customisation Buffer
@subsection Default Type

The default type is the default entry type given to a new entry. Every
entry in the Ebib database must have a type, because the type defines which
fields are available. When a new entry is created, Ebib gives it a default
type, which can be customised through this option. The standard value is
@samp{article}.



@node Preload Bib Files, Additional Fields, Default Type, The Customisation Buffer
@subsection Preload Bib Files

@anchor{preload-bib-files} This option allows you to specify which file(s) Ebib is to load when it
starts up. Specify one file per line, press the @samp{INS} button to add more
files. You can complete a partial filename with @samp{M-TAB}.



@node Additional Fields, Index Window Size, Preload Bib Files, The Customisation Buffer
@subsection Additional Fields

@anchor{additional-fields} The additional fields are those fields that are available for all entry
types, and which BibTeX generally ignores. This option allows you to
specify which additional fields you wish to use in your database. Specify
one field per line, press the @samp{INS} button to add more fields.

By default, the following additional fields are defined: @samp{crossref@comma{} url@comma{}
annote@comma{} abstract@comma{} keywords@comma{} file} and @samp{timestamp}.



@node Index Window Size, Index Display Fields, Additional Fields, The Customisation Buffer
@subsection Index Window Size

This option lets you specify the size of the index window at the top of the
Ebib screen. The default value is 10.



@node Index Display Fields, Insertion Strings, Index Window Size, The Customisation Buffer
@subsection Index Display Fields

@anchor{index-display-fields} This option allows you to specify fields that should be displayed next to
the entry key in the index buffer. By default, the index buffer only shows
the key of each entry, but if this is too little information, you can use
this option to display e.g. the title of each entry as well.



@node Insertion Strings, Sort Order, Index Display Fields, The Customisation Buffer
@subsection Insertion Strings

@anchor{insertion-strings} With the command @samp{ebib-insert-bibtex-key} or with the command key @samp{p} in the
index buffer, you can insert a BibTeX key into a LaTeX buffer. This option
allows you to customise the string that Ebib inserts in the buffer.

In fact, it is possible to define multiple strings. Each string must be
numbered: this number provides a way to identify the string that you want
to use. You can select the desired string by calling @samp{ebib-insert-bibtex-key}
or by hitting @samp{p} with a numeric prefix argument corresponding to the string.

Each string @emph{must} contain a @samp{%s} directive, which is replaced with the BibTeX
key. For example, it is possible to define the following:

@example

0:  @{%s@}
1:  \cite@{%s@}
2:  \nocite@{%s@}

@end example

With this, typing @samp{M-2 M-x ebib-insert-bibtex-key}, followed by a BibTeX key
inserts the command <verb>\nocite@{<key>@}</verb> into the current
buffer. Typing @samp{M-2 p} in the index buffer does the same for the LaTeX buffer
you choose. (Note that the prefix argument also works when you have bound
@samp{ebib-insert-bibtex-key} to a key sequence. That is, if you have bound it to
say @samp{C-c b}, typing @samp{M-2 C-c b} inserts the second string.)

Even if you have specified multiple strings, you can still use
@samp{ebib-insert-bibtex-key} or hit @samp{p} without prefix argument. In that case, Ebib
just inserts string number 1. Note that if you define only one custom
string, it still needs to be numbered. Give it number 1, so that you can
enter it without prefix argument.

The default value of this option is @samp{((0 . "%s") (1 . "\cite@{%s@}"))}. With
this setting, both @samp{ebib-insert-bibtex-key} and @samp{p} insert the key with the
LaTeX command <verb>\cite</verb> by default, and they can furthemore be
used with a prefix argument @samp{0} (i.e. @samp{M-0 ebib-insert-bibtex-key} or @samp{M-0 p}) to
insert just the bare key, without a <verb>\cite</verb> command.



@node Sort Order, Save Xrefs First, Insertion Strings, The Customisation Buffer
@subsection Sort Order

The use of this option is explained above, see @ref{sorting-bib-file, Sorting the .bib file}. To
create a sort order, click the @samp{INS} button to create a sort level, and then
click the @samp{INS} button under that sort level to enter a sort field. If you
want to add more than one sort field to the sort level, simply hit @samp{INS}
again.



@node Save Xrefs First, Crossref Face, Sort Order, The Customisation Buffer
@subsection Save Xrefs First

@anchor{save-xrefs-first} For cross-referencing to work, the cross-referencing entries must appear in
the @samp{.bib} file @emph{before} the cross-referenced entries. In order to tell Ebib to
save all entries with a @samp{crossref} field first, you must set the option @samp{Save
Xrefs First} in Ebib's customisation buffer. With this option set, BibTeX's
crossreferencing options work as intended.

By default, this option is unset, because it (marginally) slows down saving
the @samp{.bib} file somewhat.



@node Crossref Face, Marked Face, Save Xrefs First, The Customisation Buffer
@subsection Crossref Face

@anchor{crossref-face} Field values inherited from a cross-referenced entry are marked with this
face. By default, the face has red as foreground colour.



@node Marked Face, Use Timestamp, Crossref Face, The Customisation Buffer
@subsection Marked Face

@anchor{marked-face} When entries are marked (with @samp{m}), they are highlighted in this face. By
default, GNU Emacs uses the text property @samp{highlight}. XEmacs only allows
this on terminals, therefore it displays marked entries with a red
background and a white foreground colour. This option allows you to change
these defaults.



@node Use Timestamp, Timestamp Format, Marked Face, The Customisation Buffer
@subsection Use Timestamp

If this option is set, Ebib will add a @samp{timestamp} field to every new entry,
recording the date and time it was added to the database. See @ref{timestamps, Timestamps}.



@node Timestamp Format, Standard Url Field, Use Timestamp, The Customisation Buffer
@subsection Timestamp Format

This option specifies the format string that is used to create the
timestamp. The format string is used by @samp{format-time-string} to create a time
representation. The default value is @samp{"%a %b %e %T %Y"}, which produces a
timestamp of the form @samp{"Mon Mar 12 01:03:26 2007"}. See the documentation for
@samp{format-time-string} for the forms that the format string can take.



@node Standard Url Field, Url Regexp, Timestamp Format, The Customisation Buffer
@subsection Standard Url Field

@anchor{standard-url-field} This is the field that Ebib searches for URLs if you press @samp{u} in the index
buffer. Its default value is @samp{url}.



@node Url Regexp, Browser Command, Standard Url Field, The Customisation Buffer
@subsection Url Regexp

@anchor{url-regexp} This is the regular expression that Ebib uses to search for URLs in a
field. The default value is:

@example

\\url@{\(.*\)@}\|https?://[^ '<>\"\n\t\f]+

@end example

With this regular expression, Ebib considers everything that is in a LaTeX
<verb>\url@{@dots{}@}</verb> command as a URL, and furthermore every string of
text that starts with @samp{http://} or @samp{https://} and does not contain whitespace
or one of the characters @samp{' " <} or @samp{>}.



@node Browser Command, Standard File Field, Url Regexp, The Customisation Buffer
@subsection Browser Command

@anchor{browser-command} If this option is unset (which is the default), Ebib uses the Emacs
function @samp{browse-url} to start a browser. If this function does not exist,
you can set this option. For example, if you use the Firefox browser, set
this option to @samp{firefox}.

For this to work, the browser that you use must be able to handle a URL on
the command line.



@node Standard File Field, File Associations, Browser Command, The Customisation Buffer
@subsection Standard File Field

@anchor{standard-file-field} This is the field that Ebib searches for filenames if you press @samp{f} in the
index buffer. Its default value is @samp{file}.



@node File Associations, File Regexp, Standard File Field, The Customisation Buffer
@subsection File Associations

@anchor{file-associations} The programs used to view files. By default, programs for @samp{.pdf} and @samp{.ps}
files are specified, which should be available on most linux systems. If
you prefer other programs or are running on Windows, you'll can specify
them here. Note that Ebib searches the PATH for the programs, but you can
also specify full path names. Of course, it is also possible to add new
associations.

Note that GNU/Emacs 23 (as yet unreleased) comes with @samp{doc-view-mode}, which
provides a way to view @samp{.pdf} and @samp{.ps} files inside Emacs. (The files are
converted to @samp{.png} format first.) If you prefer to use this mode, simply
leave the program field blank for the relevant file type.



@node File Regexp, File Search Dirs, File Associations, The Customisation Buffer
@subsection File Regexp

@anchor{file-regexp} In order to find files in an field, Ebib uses a regural expression. The
default value is:

@example

  [^?|\:*<>\" \n\t\f]+

@end example

This essentially means that every string of characters not containing any
of the characters 

@example

? | \ : * < > "

@end example or space, newline, tab
of formfeed. URLs can easily by recognised by the prefix @samp{http:}, but
recognising files is not so straightforward. It is therefore not advisable
to put anything but filenames in the @samp{file} field.



@node File Search Dirs, Print Preamble, File Regexp, The Customisation Buffer
@subsection File Search Dirs

@anchor{file-search-dirs} This is the list of directories that Ebib searches for files. Note that
searching is not recursive: only the files listed here are searched, not
their subdirectories.



@node Print Preamble, Print Multiline, File Search Dirs, The Customisation Buffer
@subsection Print Preamble

This option specifies the preamble that is to be added to the LaTeX file
Ebib creates for printing the database (i.e., the @samp{P} command). By default,
the preamble is empty. You can set your own <verb>\usepackage</verb>
commands, or anything else you may need.



@node Print Multiline, Latex Preamble, Print Preamble, The Customisation Buffer
@subsection Print Multiline

When this options is set, Ebib includes multiline field values when it
creates a LaTeX file with @samp{P} (@samp{ebib-print-database}). When unset, multiline
values are excluded, which saves space. By default, this option is unset.



@node Latex Preamble, Print Tempfile, Print Multiline, The Customisation Buffer
@subsection Latex Preamble

This option specifies the preamble to be added to the LaTeX file for
creating a list of references from the database (i.e., the @samp{L} command). By
default, the line <verb>\bibliographystyle@{plain@}</verb> is put in the
preamble, but you may want to specify your own BibTeX packages and options.



@node Print Tempfile, Allow Identical Fields, Latex Preamble, The Customisation Buffer
@subsection Print Tempfile

This option specifies the name and location of the temporary file Ebib
creates with the commands @samp{ebib-print-database} and
@samp{ebib-latex-database}. By default, this option has no value,
which means that Ebib will ask for a filename each time either of these
commands is called.



@node Allow Identical Fields, Entry Types, Print Tempfile, The Customisation Buffer
@subsection Allow Identical Fields

@anchor{allow-identical-fields} If this option is set, Ebib stores the values of multiple occurrences of a
single field within an entry in a single occurrence of that field,
separated by semicolons. By default, this option is unset, because it slows
down the loading of @samp{.bib} files. See @ref{multiple-identical-fields, Multiple Identical Fields}.



@node Entry Types,  , Allow Identical Fields, The Customisation Buffer
@subsection Entry Types

@anchor{entry-types} This option allows you to customise the entry types that Ebib uses. Each
entry type has a name, a set of obligatory fields and a set of optional
fields. You can add, alter or delete single fields in an entry type, or
whole entry types.

If you want to add an entry type, hit the @samp{INS} key on the top level and give
the new entry a name, then add obligatory and/or optional fields. It is not
necessary that an entry type has both obligatory and optional fields, you
can define an entry that has only obligatory or only optional fields.




@node Modifying Key Bindings,  , The Customisation Buffer, Customisation
@section Modifying Key Bindings

@anchor{modifying-key-bindings} If you are unhappy about Ebib's standard key bindings, you can change them
to anything you like. To do this, you have to create a file @samp{~/.ebibrc} and
write your preferred key bindings in it. A key binding definition is built
up as follows:

@example

(ebib-key <buffer> <key> <command>)

@end example

@samp{<buffer>} is either @samp{index}, @samp{entry} or @samp{strings}, for the corresponding
buffer. @samp{<key>} is a standard Emacs key description, and @samp{<command>} is the
Ebib command to be associated with the key. The commands that can be used
here are listed in @ref{ebib-buffers, The Ebib Buffers}. Note that it is possible to bind more
than one key to a single function: just add as many @samp{ebib-key} statements as
necessary.

As an example, the following binds @samp{C-s} to @samp{ebib-search} in the index buffer,
so that the database can be searched with @samp{C-s} as well as with @samp{/}:

@example

(ebib-key index "\C-s" ebib-search)

@end example

If you want to unbind a key, you can simply leave out @samp{<command>}. So if you
want to bind the command @samp{ebib-delete-entry} to @samp{D} rather than @samp{d}, you need to
put the following in @samp{.ebibrc}:

@example

(ebib-key index "D" ebib-delete-entry)
(ebib-key index "d")

@end example

The first line binds @samp{D} to the command @samp{ebib-delete-entry}. The second line
unbinds @samp{d}.

If a command can be called with a prefix key (as for example
@samp{ebib-delete-entry} can), @samp{ebib-key} will automatically rebind the prefixed
version as well. So in the example above, the first line not only binds @samp{D},
it also binds @samp{; D}. Similarly, the second line not only unbinds @samp{d}, but also
@samp{; d}.

It is also possible to redefine the prefix key itself. To do this, you must
specify @samp{mark-prefix} for @samp{<buffer>}. The value of @samp{<command>} is irrelevant
here, so it can be left out:

@example

(ebib-key mark-prefix ":")

@end example

This sets up @samp{:} as the new prefix key. Doing this automatically unbinds the
existing prefix key.




@c Page published by Emacs Muse ends here
@bye
